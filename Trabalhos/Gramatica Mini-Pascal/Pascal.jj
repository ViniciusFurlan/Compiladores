PARSER_BEGIN(Pascal)
import java.io.*;
public class Pascal {

  public static void main(String args[]) throws ParseException,IOException {

    Pascal parser = new Pascal(new FileInputStream(args[0]));
    parser.Programa();
  }

}

PARSER_END(Pascal)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <PROGRAM: "program">
| <INTEIRO: "integer">
| <REAL: "real">
| <VAR: "var">
| <OF: "of">
| <FUNCTION: "function">
| <PROCEDURE: "procedure">
| <LBRACE:"(">
| <RBRACE: ")">
| <SEMI: ";">
| <COLON: ":">
| <ARRAY: "array">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <PERIOD: ".">
| <BEGIN: "begin">
| <END: "end">
| <ATRIB: ":=">
| <IF: "if">
| <THEN: "then">
| <ELSE: "else">
| <WHILE: "while">
| <DO: "do">
| <COMMA: ",">
| <NOT: "not">
}

TOKEN :
{
<OPERADOR_MULTIPLICATIVO: ("*"|"/"|"div"|"mod"|"and")>
|
<OPERADOR_ADITIVO: ("+"| "-" | "or")>
|
< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
|
<OPERADOR_RELACIONAL: ("="|"<>"|"<"|"<="|">"|">=")>
|
<NUM: <DIGITOS> (<FRACAO_OPCIONAL>)? (<EXPOENTE_OPCIONAL>)?>
|
<DIGITOS: <DIGITO>(<DIGITO>)*>
|
<SINAL: "+" | "-" >
|
<DIGITO: ["0"-"9"]>
|
<FRACAO_OPCIONAL: <PERIOD><DIGITOS> >
|
<EXPOENTE_OPCIONAL: "E" (<SINAL>)? <DIGITOS> >
}


void Programa () :
{}
{ <PROGRAM> <ID>
  <LBRACE> Lista_de_identificadores() <RBRACE> <SEMI>
   Declaracoes()
   Declaracoes_de_subprogramas() Enunciado_composto() "."
  <EOF>
}


void Lista_de_identificadores():
{}
{
  <ID> Lista2()
}

void Lista2():
{}
{
 ("," <ID> Lista2())?
}

void Declaracoes():
{}
{
  (<VAR> Lista_de_identificadores() <COLON> Tipo() <SEMI> Declaracoes())?
}

void Tipo():
{}
{
  Tipo_padrao() | <ARRAY> <LBRACKET> <NUM> <PERIOD> <PERIOD> <NUM> <RBRACKET> <OF> Tipo_padrao()
}

void Tipo_padrao():
{}
{
  <INTEIRO> | <REAL>
}

void Declaracoes_de_subprogramas():
{}
{
  (Declaracoes_de_subprograma() Declaracoes_de_subprogramas())?
}

void Declaracoes_de_subprograma():
{}
{
  Cabecalho_de_subprograma() Declaracoes() Enunciado_composto()
}

void Cabecalho_de_subprograma():
{}
{
  <FUNCTION> <ID> Argumentos() <COLON> Tipo_padrao() <SEMI> | <PROCEDURE> <ID> Argumentos() <SEMI>
}

void Argumentos():
{}
{
  (<LBRACE> Lista_de_parametros() <RBRACE>)?
}

void Lista_de_parametros():
{}
{
  Lista_de_identificadores() <COLON> Tipo() Lista_de_parametros2()
}

void Lista_de_parametros2():
{}
{
  (<SEMI> Lista_de_identificadores() <COLON> Tipo() Lista_de_parametros2())?
}

void Enunciado_composto():
{}
{
  <BEGIN> Enunciados_opcionais() <END>
}

void Enunciados_opcionais():
{}
{
  (Lista_de_enunciados())?
}

void Lista_de_enunciados():
{}
{
  Enunciado() Lista_de_enunciados2()
}

void Lista_de_enunciados2():
{}
{
  (<SEMI> Enunciado() Lista_de_enunciados2())?
}

void Enunciado():
{}
{
  <ID> Enunciado2()
  | Enunciado_composto()
  | <IF> Expressao() <THEN> Enunciado() <ELSE> Enunciado()
  | <WHILE> Expressao() <DO> Enunciado()
}
void Enunciado2():
{}
{
  Variavel() <ATRIB> Expressao()
  | Chamada_de_procedimento()
}

void Variavel():
{}
{
  (<LBRACKET> Expressao() <RBRACKET>)?
}
void Chamada_de_procedimento():
{}
{
   (<LBRACE> Lista_de_expressoes() <RBRACE>)?
}

void Lista_de_expressoes():
{}
{
  Expressao() Lista_de_expressoes2()
}

void Lista_de_expressoes2():
{}
{
  (<COMMA> Expressao())?
}

void Expressao():
{}
{
  Expressao_simples() Expressao2()
}
void Expressao2():
{}
{
  (<OPERADOR_RELACIONAL> Expressao_simples())?
}

void Expressao_simples():
{}
{
  Termo() Expressao_simples2()
  | Sinal() Termo() Expressao_simples2()
}

void Expressao_simples2():
{}
{
  (<OPERADOR_ADITIVO> Termo() Expressao_simples2())?
}

void Termo():
{}
{
  Fator() Termo2()
}

void Termo2():
{}
{
  (<OPERADOR_MULTIPLICATIVO> Fator() Termo2())?
}

void Fator():
{}
{
  <ID> Fator2()
  | <NUM>
  | <LBRACE> Expressao() <RBRACE>
  | <NOT> Fator()
}

void Fator2():
{}
{
  (<LBRACE> Lista_de_expressoes() <RBRACE>)?
}

void Sinal():
{}
{
  <SINAL>
}
